/************************************************************************/
/*																		*/
/*	video_demo.c	--	ZYBO Video demonstration 						*/
/*																		*/
/************************************************************************/
/*	Author: Sam Bobrowicz												*/
/*	Copyright 2015, Digilent Inc.										*/
/************************************************************************/
/*  Module Description: 												*/
/*																		*/
/*		This file contains code for running a demonstration of the		*/
/*		Video input and output capabilities on the ZYBO. It is a good	*/
/*		example of how to properly use the display_ctrl and				*/
/*		video_capture drivers.											*/
/*																		*/
/*																		*/
/************************************************************************/
/*  Revision History:													*/
/* 																		*/
/*		11/25/2015(SamB): Created										*/
/*																		*/
/************************************************************************/

/* ------------------------------------------------------------ */
/*				Include File Definitions						*/
/* ------------------------------------------------------------ */

#include "video_demo.h"
#include "video_capture/video_capture.h"
#include "display_ctrl/display_ctrl.h"
#include "intc/intc.h"
#include <stdio.h>
#include "xuartps.h"
#include "math.h"
#include <ctype.h>
#include <stdlib.h>
#include <time.h>
#include "xil_types.h"
#include "xil_cache.h"
#include "timer_ps/timer_ps.h"
#include "xparameters.h"
#include "xgpio.h"
#include "xscugic.h"
#include "xil_exception.h"
#include "xil_printf.h"
#include "stdbool.h"

////#define TMR_DEVICE_ID			XPAR_TMRCTR_0_DEVICE_ID
#define BTNS_DEVICE_ID			XPAR_AXI_GPIO_BTN_DEVICE_ID
#define LEDS_DEVICE_ID			XPAR_AXI_GPIO_LED_DEVICE_ID
#define SWI_DEVICE_ID			XPAR_AXI_GPIO_SW_DEVICE_ID
/*
 * XPAR redefines
 */
#define DYNCLK_BASEADDR 		XPAR_AXI_DYNCLK_0_BASEADDR
#define VGA_VDMA_ID 			XPAR_AXIVDMA_0_DEVICE_ID
#define DISP_VTC_ID 			XPAR_VTC_0_DEVICE_ID
#define VID_VTC_ID 				XPAR_VTC_1_DEVICE_ID
#define VID_GPIO_ID 			XPAR_AXI_GPIO_VIDEO_DEVICE_ID
#define VID_VTC_IRPT_ID 		XPS_FPGA3_INT_ID
#define VID_GPIO_IRPT_ID 		XPS_FPGA4_INT_ID
#define SCU_TIMER_ID	 		XPAR_SCUTIMER_DEVICE_ID
#define UART_BASEADDR 			XPAR_PS7_UART_1_BASEADDR

#define LEVEL_1_ENEMIES 5
#define LEVEL_2_ENEMIES 10
#define LEVEL_3_ENEMIES 15
/* ------------------------------------------------------------ */
/*				Global Variables								*/
/* ------------------------------------------------------------ */

/*
 * Display and Video Driver structs
 */

XGpio LEDInst, BTNInst, SWIInst;
DisplayCtrl dispCtrl;
XAxiVdma vdma;
VideoCapture videoCapt;
INTC intc;

static int led_data;
static int btn_value;
static int swi_value;
static int fired = 0;
static int shoot = 0;

static int bulletsFired = 0;
static int enemiesKilled = 0;
static int points = 0;
static int enemyPassed;



char fRefresh; //flag used to trigger a refresh of the Menu on video detect

/*
 * Framebuffers for video data
 */
u8 frameBuf[DISPLAY_NUM_FRAMES][DEMO_MAX_FRAME];
u8 *pFrames[DISPLAY_NUM_FRAMES]; //array of pointers to the frame buffers

/*
 * Interrupt vector table
 */
const ivt_t ivt[] = {
videoGpioIvt(VID_GPIO_IRPT_ID, &videoCapt),
videoVtcIvt(VID_VTC_IRPT_ID, &(videoCapt.vtc)) };

void shooter(u8 *frame, u32 width, u32 height, u32 stride);
void hostile(u8 *frame, u32 width, u32 height, u32 stride);
void backgrund(u8 *frame, u32 width, u32 height, u32 stride);
void shot(u8 *frame, u32 width, u32 height, u32 stride);

/* ------------------------------------------------------------ */
/*				Procedure Definitions							*/
/* ------------------------------------------------------------ */

struct object {
	float xPos;
	float yPos;

	float xSize;
	float ySize;

} laser, player, enemy[5];

//more prototypes
void isHit();

// Assumes 0 <= max <= RAND_MAX
// Returns in the closed interval [0, max]
long randomNum(long max) {
	unsigned long
	// max <= RAND_MAX < ULONG_MAX, so this is okay.
	num_bins = (unsigned long) max + 1, num_rand = (unsigned long) RAND_MAX + 1,
			bin_size = num_rand / num_bins, defect = num_rand % num_bins;

	long x;
	do {
		//srand(time(NULL));
		x = rand();
	}
	// This is carefully written not to overflow
	while (num_rand - defect <= (unsigned long) x);

	// Truncated division is intentional
	return x / bin_size;
}

void InitializeElements() {


	player.xSize = 20 * 3;
	player.xPos = randomNum((640 * 3 - player.xSize));

	player.ySize = 480 - 20;
	player.yPos = 0;



//	for(x = 0; x < LEVEL_1_ENEMIES; x++){


		//enemy[x].xPos = randomNum((640 * 3 - enemy[x].xSize));



//		enemy[x].xSize = 40*3;
		//enemy[x].xPos = randomNum((640 * 3 - enemy[x].xSize));

int i;
		for (i = 0; i < LEVEL_1_ENEMIES; i++) {

		enemy[i].xSize = (40 * 3);
		enemy[i].xPos = enemy[i].xSize + randomNum((640 * 3 - player.xSize));

		enemy[i].xPos = enemy[i].xSize + randomNum((640 * 3 - player.xSize));
if(enemy[i].xSize > 640 * 3){
	enemy[i].xPos = enemy[i].xSize + randomNum((640 * 3 - player.xSize));
}
		enemy[i].ySize = 40;
		enemy[i].yPos = 0;
	}


	laser.xSize = 5;
	laser.ySize = 5;
	laser.xPos = (((640 * 3) / 2) + 12);
	laser.yPos = 460;

}

int main(void) {
	int status;
	//----------------------------------------------------
	// INITIALIZE THE PERIPHERALS & SET DIRECTIONS OF GPIO
	//----------------------------------------------------
	// Initialise LEDs
	status = XGpio_Initialize(&LEDInst, LEDS_DEVICE_ID);
	if (status != XST_SUCCESS)
		return XST_FAILURE;
	// Initialise Push Buttons
	status = XGpio_Initialize(&BTNInst, BTNS_DEVICE_ID);
	if (status != XST_SUCCESS)
		return XST_FAILURE;
	// Initialize Switches

	status = XGpio_Initialize(&SWIInst, SWI_DEVICE_ID);
	if (status != XST_SUCCESS)
		return XST_FAILURE;

	// Set LEDs direction to outputs
	XGpio_SetDataDirection(&LEDInst, 1, 0x00);
	// Set all buttons direction to inputs
	XGpio_SetDataDirection(&BTNInst, 1, 0xFF);
	// Set all buttons direction to inputs
	XGpio_SetDataDirection(&SWIInst, 1, 0xFF);
//	xil_printf("SKER DER BRO!!");
//	led_data = 0;
//	while (1) {
////		btn_value = XGpio_DiscreteRead(&BTNInst, 1);
//		swi_value = XGpio_DiscreteRead(&SWIInst, 1);
//		if (swi_value == 1) {
//			xil_printf("11111111111111111\n");
//			led_data = swi_value;
//		}
//		if (swi_value == 2) {
//			xil_printf("22222222222222222\n");
//			led_data = swi_value;
//		}
//		if (swi_value == 4) {
//			xil_printf("444444444444444444\n");
//			led_data = swi_value;
//		}
//		if (swi_value == 8) {
//			xil_printf("888888888888888888\n");
//			led_data = swi_value;
//		}
//	}

	InitializeElements();
	DemoInitialize();
	DemoRun(); // denne function kører i while loop! nedenstående while loop køres derfor ikke.

	return 0;
}

void DemoInitialize() {
	int Status;
	XAxiVdma_Config *vdmaConfig;
	int i;

	/*
	 * Initialize an array of pointers to the 3 frame buffers
	 */
	for (i = 0; i < DISPLAY_NUM_FRAMES; i++) {
		pFrames[i] = frameBuf[i];
	}

	/*
	 * Initialize a timer used for a simple delay
	 */
	TimerInitialize(SCU_TIMER_ID);

	/*
	 * Initialize VDMA driver
	 */
	vdmaConfig = XAxiVdma_LookupConfig(VGA_VDMA_ID);
	if (!vdmaConfig) {
		xil_printf("No video DMA found for ID %d\r\n", VGA_VDMA_ID);
		return;
	}
	Status = XAxiVdma_CfgInitialize(&vdma, vdmaConfig, vdmaConfig->BaseAddress);
	if (Status != XST_SUCCESS) {
		xil_printf("VDMA Configuration Initialization failed %d\r\n", Status);
		return;
	}

	/*
	 * Initialize the Display controller and start it
	 */
	Status = DisplayInitialize(&dispCtrl, &vdma, DISP_VTC_ID, DYNCLK_BASEADDR,
			pFrames, DEMO_STRIDE);
	if (Status != XST_SUCCESS) {
		xil_printf(
				"Display Ctrl initialization failed during demo initialization%d\r\n",
				Status);
		return;
	}
	Status = DisplayStart(&dispCtrl);
	if (Status != XST_SUCCESS) {
		xil_printf("Couldn't start display during demo initialization%d\r\n",
				Status);
		return;
	}

	/*
	 * Initialize the Interrupt controller and start it.
	 */
	Status = fnInitInterruptController(&intc);
	if (Status != XST_SUCCESS) {
		xil_printf("Error initializing interrupts");
		return;
	}
	fnEnableInterrupts(&intc, &ivt[0], sizeof(ivt) / sizeof(ivt[0]));

	/*
	 * Initialize the Video Capture device
	 */
	Status = VideoInitialize(&videoCapt, &intc, &vdma, VID_GPIO_ID, VID_VTC_ID,
	VID_VTC_IRPT_ID, pFrames, DEMO_STRIDE, DEMO_START_ON_DET);
	if (Status != XST_SUCCESS) {
		xil_printf(
				"Video Ctrl initialization failed during demo initialization%d\r\n",
				Status);
		return;
	}

	/*
	 * Set the Video Detect callback to trigger the menu to reset, displaying the new detected resolution
	 */

	VideoSetCallback(&videoCapt, DemoISR, &fRefresh);

	background(pFrames[dispCtrl.curFrame], dispCtrl.vMode.width,
			dispCtrl.vMode.height, DEMO_STRIDE);
	shooter(pFrames[dispCtrl.curFrame], dispCtrl.vMode.width,
			dispCtrl.vMode.height, DEMO_STRIDE);
	shot(pFrames[dispCtrl.curFrame], dispCtrl.vMode.width,
			dispCtrl.vMode.height, DEMO_STRIDE);
	hostile(pFrames[dispCtrl.curFrame], dispCtrl.vMode.width,
			dispCtrl.vMode.height, DEMO_STRIDE);
	picture(pFrames[dispCtrl.curFrame], dispCtrl.vMode.width,
			dispCtrl.vMode.height,
			DEMO_STRIDE);
//	DemoPrintTest(dispCtrl.framePtr[dispCtrl.curFrame], dispCtrl.vMode.width,
//			dispCtrl.vMode.height, dispCtrl.stride, DEMO_PATTERN_1);

	return;
}

void DemoRun() {
	int nextFrame = 0;
	char userInput = 0;

	/* Flush UART FIFO */
//	while (XUartPs_IsReceiveData(UART_BASEADDR)) {
//		XUartPs_ReadReg(UART_BASEADDR, XUARTPS_FIFO_OFFSET);
//	}
//	while (userInput != 'q') {
	while (swi_value != 8) {
		nextFrame = dispCtrl.curFrame + 1;
		if (nextFrame >= DISPLAY_NUM_FRAMES) {
			nextFrame = 0;
		}
		int z;
		for (z = 0; z < LEVEL_1_ENEMIES; z++) {
			if (enemy[z].yPos < 480) {
				enemy[z].yPos += 1;

				//enemy[z].ySize += 10;
//				xil_printf("enemy %d yPos = %d\n", z, enemy[z].yPos);
//				xil_printf("enemy %d ySize = %d\n", z, enemy[z].ySize);

				xil_printf("Bullets Fired= %d\n", bulletsFired);
				xil_printf("Enemies Killed = %d\n", enemiesKilled);
				xil_printf("Points = %d\n", points);


			}
		}
		background(pFrames[nextFrame], dispCtrl.vMode.width,
				dispCtrl.vMode.height, DEMO_STRIDE);
		shooter(pFrames[nextFrame], dispCtrl.vMode.width, dispCtrl.vMode.height,
		DEMO_STRIDE);
		shot(pFrames[nextFrame], dispCtrl.vMode.width, dispCtrl.vMode.height,
		DEMO_STRIDE);
		hostile(pFrames[nextFrame], dispCtrl.vMode.width, dispCtrl.vMode.height,
		DEMO_STRIDE);
		//picture(pFrames[nextFrame], dispCtrl.vMode.width, dispCtrl.vMode.height,
		//DEMO_STRIDE);
		DisplayChangeFrame(&dispCtrl, nextFrame);

		btn_value = XGpio_DiscreteRead(&BTNInst, 1);
		swi_value = XGpio_DiscreteRead(&SWIInst, 1);
//		fRefresh = 0;
		//DemoPrintMenu();

		switch (btn_value) {

		case 1:
			nextFrame = dispCtrl.curFrame + 1;
			if (nextFrame >= DISPLAY_NUM_FRAMES) {
				nextFrame = 0;
			}
			if (player.xPos < (640 * 3)) {
				player.xPos = player.xPos + 50;
				background(pFrames[nextFrame], dispCtrl.vMode.width,
						dispCtrl.vMode.height, DEMO_STRIDE);

				shot(pFrames[nextFrame], dispCtrl.vMode.width,
						dispCtrl.vMode.height, DEMO_STRIDE);

				hostile(pFrames[nextFrame], dispCtrl.vMode.width,
						dispCtrl.vMode.height, DEMO_STRIDE);

				picture(pFrames[nextFrame], dispCtrl.vMode.width,
						dispCtrl.vMode.height, DEMO_STRIDE);

				shooter(pFrames[nextFrame], dispCtrl.vMode.width,
						dispCtrl.vMode.height, DEMO_STRIDE);

				DisplayChangeFrame(&dispCtrl, nextFrame);

			}
			break;
		case 2:
			nextFrame = dispCtrl.curFrame + 1;
			if (nextFrame >= DISPLAY_NUM_FRAMES) {
				nextFrame = 0;
			}
			if (player.xPos > 10) {
				player.xPos = player.xPos - 50;
				background(pFrames[nextFrame], dispCtrl.vMode.width,
						dispCtrl.vMode.height, DEMO_STRIDE);

				shot(pFrames[nextFrame], dispCtrl.vMode.width,
						dispCtrl.vMode.height, DEMO_STRIDE);

				hostile(pFrames[nextFrame], dispCtrl.vMode.width,
						dispCtrl.vMode.height, DEMO_STRIDE);

				picture(pFrames[nextFrame], dispCtrl.vMode.width,
						dispCtrl.vMode.height, DEMO_STRIDE);

				shooter(pFrames[nextFrame], dispCtrl.vMode.width,
						dispCtrl.vMode.height, DEMO_STRIDE);

				DisplayChangeFrame(&dispCtrl, nextFrame);
			}
			break;
//		case 4:
//			nextFrame = dispCtrl.curFrame + 1;
//			if (nextFrame >= DISPLAY_NUM_FRAMES) {
//				nextFrame = 0;
//			}
//			int z;
//			for (z = 0; z < LEVEL_1_ENEMIES; z++) {
//				if (enemy[z].yPos < 480) {
//					enemy[z].yPos = enemy[0].yPos + 10;
//				}
//			}
//			background(pFrames[nextFrame], dispCtrl.vMode.width,
//					dispCtrl.vMode.height, DEMO_STRIDE);
//			shooter(pFrames[nextFrame], dispCtrl.vMode.width,
//					dispCtrl.vMode.height, DEMO_STRIDE);
//			shot(pFrames[nextFrame], dispCtrl.vMode.width,
//					dispCtrl.vMode.height, DEMO_STRIDE);
//			hostile(pFrames[nextFrame], dispCtrl.vMode.width,
//					dispCtrl.vMode.height, DEMO_STRIDE);
//			picture(pFrames[nextFrame], dispCtrl.vMode.width,
//					dispCtrl.vMode.height, DEMO_STRIDE);
//			DisplayChangeFrame(&dispCtrl, nextFrame);
//			break;
////		case 'w':
////			nextFrame = dispCtrl.curFrame + 1;
////			if (nextFrame >= DISPLAY_NUM_FRAMES) {
////				nextFrame = 0;
////			}
////			for (z = 0; z < LEVEL_1_ENEMIES; z++) {
////				if (enemy[z].yPos < 480) {
////					enemy[z].yPos = enemy[0].yPos - 10;
////				}
////			}
////			background(pFrames[nextFrame], dispCtrl.vMode.width,
////					dispCtrl.vMode.height, DEMO_STRIDE);
////			shooter(pFrames[nextFrame], dispCtrl.vMode.width,
////					dispCtrl.vMode.height, DEMO_STRIDE);
////			shot(pFrames[nextFrame], dispCtrl.vMode.width,
////					dispCtrl.vMode.height, DEMO_STRIDE);
////			hostile(pFrames[nextFrame], dispCtrl.vMode.width,
////					dispCtrl.vMode.height, DEMO_STRIDE);
////			DisplayChangeFrame(&dispCtrl, nextFrame);
////			break;
		case 8:
			if (shoot == 0) {
				shoot = 1;
			}
			nextFrame = dispCtrl.curFrame + 1;
			if (nextFrame >= DISPLAY_NUM_FRAMES) {
				nextFrame = 0;
			}
			if (laser.yPos < 11) {
				laser.yPos = 460;
			}
			if (laser.yPos < 450 && laser.yPos > 11) {
				shoot = 0;
			}
			laser.yPos = laser.yPos - 20;

			isHit();

			background(pFrames[nextFrame], dispCtrl.vMode.width,
					dispCtrl.vMode.height, DEMO_STRIDE);
			shooter(pFrames[nextFrame], dispCtrl.vMode.width,
					dispCtrl.vMode.height, DEMO_STRIDE);
			shot(pFrames[nextFrame], dispCtrl.vMode.width,
					dispCtrl.vMode.height, DEMO_STRIDE);
			hostile(pFrames[nextFrame], dispCtrl.vMode.width,
					dispCtrl.vMode.height, DEMO_STRIDE);
			picture(pFrames[nextFrame], dispCtrl.vMode.width,
					dispCtrl.vMode.height, DEMO_STRIDE);
			DisplayChangeFrame(&dispCtrl, nextFrame);
			break;
		default:
			//xil_printf("\n\rInvalid Selection");
			//TimerDelay(5000);
			;
		}
	}
	return;
}

void isHit() {
	int i;

	for (i = 0; i <= 5; i++) {
		if ((enemy[i].yPos + enemy[i].ySize > laser.yPos)
				&& (enemy[i].xPos < laser.xPos)
				&& (enemy[i].xPos + enemy[i].xSize > laser.xPos + laser.xSize)) {
			enemy[i] = enemy[i + 1];
			enemiesKilled++;
			points += 10;
		}

	}
}

void killEnemy(struct object ob) {
	ob.xPos = 0;
	ob.yPos = 0;
	ob.xSize = 0;
	ob.ySize = 0;

	//resetShot();
}

void resetShot() {
	laser.xPos = 0;
	laser.yPos = 0;
	laser.xSize = 0;
	laser.ySize = 0;

	shoot = 0;
	fired = 1;
	shot(pFrames[dispCtrl.curFrame], dispCtrl.vMode.width,
			dispCtrl.vMode.height,
			DEMO_STRIDE);
}

void DemoPrintMenu() {
	xil_printf("\x1B[H"); //Set cursor to top left of terminal
	xil_printf("\x1B[2J"); //Clear terminal
	xil_printf("**************************************************\n\r");
	xil_printf("*                ZYBO Video Demo                 *\n\r");
	xil_printf("**************************************************\n\r");
	xil_printf("*Display Resolution: %28s*\n\r", dispCtrl.vMode.label);
	printf("*Display Pixel Clock Freq. (MHz): %15.3f*\n\r", dispCtrl.pxlFreq);
	xil_printf("*Display Frame Index: %27d*\n\r", dispCtrl.curFrame);
	if (videoCapt.state == VIDEO_DISCONNECTED)
		xil_printf("*Video Capture Resolution: %22s*\n\r", "!HDMI UNPLUGGED!");
	else
		xil_printf("*Video Capture Resolution: %17dx%-4d*\n\r",
				videoCapt.timing.HActiveVideo, videoCapt.timing.VActiveVideo);
	xil_printf("*Video Frame Index: %29d*\n\r", videoCapt.curFrame);
	xil_printf("**************************************************\n\r");
	xil_printf("\n\r");
	xil_printf("1 - Change Display Resolution\n\r");
	xil_printf("2 - Change Display Framebuffer Index\n\r");
	xil_printf("3 - Print Blended Test Pattern to Display Framebuffer\n\r");
	xil_printf("4 - Print Color Bar Test Pattern to Display Framebuffer\n\r");
	xil_printf("5 - Start/Stop Video stream into Video Framebuffer\n\r");
	xil_printf("6 - Change Video Framebuffer Index\n\r");
	xil_printf("7 - Grab Video Frame and invert colors\n\r");
	xil_printf("8 - Grab Video Frame and scale to Display resolution\n\r");
	xil_printf("q - Quit\n\r");
	xil_printf("\n\r");
	xil_printf("\n\r");
	xil_printf("Enter a selection:");
}

void DemoChangeRes() {
	int fResSet = 0;
	int status;
	char userInput = 0;

	/* Flush UART FIFO */
	while (XUartPs_IsReceiveData(UART_BASEADDR)) {
		XUartPs_ReadReg(UART_BASEADDR, XUARTPS_FIFO_OFFSET);
	}

	while (!fResSet) {
		DemoCRMenu();

		/* Wait for data on UART */
		while (!XUartPs_IsReceiveData(UART_BASEADDR)) {
		}

		/* Store the first character in the UART recieve FIFO and echo it */
		userInput = XUartPs_ReadReg(UART_BASEADDR, XUARTPS_FIFO_OFFSET);
		xil_printf("%c", userInput);
		status = XST_SUCCESS;
		switch (userInput) {
		case '1':
			status = DisplayStop(&dispCtrl);
			DisplaySetMode(&dispCtrl, &VMODE_640x480);
			DisplayStart(&dispCtrl);
			fResSet = 1;
			break;
		case '2':
			status = DisplayStop(&dispCtrl);
			DisplaySetMode(&dispCtrl, &VMODE_800x600);
			DisplayStart(&dispCtrl);
			fResSet = 1;
			break;
		case '3':
			status = DisplayStop(&dispCtrl);
			DisplaySetMode(&dispCtrl, &VMODE_1280x720);
			DisplayStart(&dispCtrl);
			fResSet = 1;
			break;
		case '4':
			status = DisplayStop(&dispCtrl);
			DisplaySetMode(&dispCtrl, &VMODE_1280x1024);
			DisplayStart(&dispCtrl);
			fResSet = 1;
			break;
		case '5':
			status = DisplayStop(&dispCtrl);
			DisplaySetMode(&dispCtrl, &VMODE_1920x1080);
			DisplayStart(&dispCtrl);
			fResSet = 1;
			break;
		case 'q':
			fResSet = 1;
			break;
		default:
			xil_printf("\n\rInvalid Selection");
			TimerDelay(500000);
		}
		if (status == XST_DMA_ERROR) {
			xil_printf("\n\rWARNING: AXI VDMA Error detected and cleared\n\r");
		}
	}
}

void DemoCRMenu() {
	xil_printf("\x1B[H"); //Set cursor to top left of terminal
	xil_printf("\x1B[2J"); //Clear terminal
	xil_printf("**************************************************\n\r");
	xil_printf("*                ZYBO Video Demo                 *\n\r");
	xil_printf("**************************************************\n\r");
	xil_printf("*Current Resolution: %28s*\n\r", dispCtrl.vMode.label);
	printf("*Pixel Clock Freq. (MHz): %23.3f*\n\r", dispCtrl.pxlFreq);
	xil_printf("**************************************************\n\r");
	xil_printf("\n\r");
	xil_printf("1 - %s\n\r", VMODE_640x480.label);
	xil_printf("2 - %s\n\r", VMODE_800x600.label);
	xil_printf("3 - %s\n\r", VMODE_1280x720.label);
	xil_printf("4 - %s\n\r", VMODE_1280x1024.label);
	xil_printf("5 - %s\n\r", VMODE_1920x1080.label);
	xil_printf("q - Quit (don't change resolution)\n\r");
	xil_printf("\n\r");
	xil_printf("Select a new resolution:");
}

void DemoInvertFrame(u8 *srcFrame, u8 *destFrame, u32 width, u32 height,
		u32 stride) {
	u32 xcoi, ycoi;
	u32 lineStart = 0;
	for (ycoi = 0; ycoi < height; ycoi++) {
		for (xcoi = 0; xcoi < (width * 3); xcoi += 3) {
			destFrame[xcoi + lineStart] = ~srcFrame[xcoi + lineStart]; //Red
			destFrame[xcoi + lineStart + 1] = ~srcFrame[xcoi + lineStart + 1]; //Blue
			destFrame[xcoi + lineStart + 2] = ~srcFrame[xcoi + lineStart + 2]; //Green
		}
		lineStart += stride;
	}
	/*
	 * Flush the framebuffer memory range to ensure changes are written to the
	 * actual memory, and therefore accessible by the VDMA.
	 */
	Xil_DCacheFlushRange((unsigned int) destFrame, DEMO_MAX_FRAME);
}

/*
 * Bilinear interpolation algorithm. Assumes both frames have the same stride.
 */
void DemoScaleFrame(u8 *srcFrame, u8 *destFrame, u32 srcWidth, u32 srcHeight,
		u32 destWidth, u32 destHeight, u32 stride) {
	float xInc, yInc; // Width/height of a destination frame pixel in the source frame coordinate system
	float xcoSrc, ycoSrc; // Location of the destination pixel being operated on in the source frame coordinate system
	float x1y1, x2y1, x1y2, x2y2; //Used to store the color data of the four nearest source pixels to the destination pixel
	int ix1y1, ix2y1, ix1y2, ix2y2; //indexes into the source frame for the four nearest source pixels to the destination pixel
	float xDist, yDist; //distances between destination pixel and x1y1 source pixels in source frame coordinate system

	int xcoDest, ycoDest; // Location of the destination pixel being operated on in the destination coordinate system
	int iy1; //Used to store the index of the first source pixel in the line with y1
	int iDest; //index of the pixel data in the destination frame being operated on

	int i;

	xInc = ((float) srcWidth - 1.0) / ((float) destWidth);
	yInc = ((float) srcHeight - 1.0) / ((float) destHeight);

	ycoSrc = 0.0;
	for (ycoDest = 0; ycoDest < destHeight; ycoDest++) {
		iy1 = ((int) ycoSrc) * stride;
		yDist = ycoSrc - ((float) ((int) ycoSrc));

		/*
		 * Save some cycles in the loop below by presetting the destination
		 * index to the first pixel in the current line
		 */
		iDest = ycoDest * stride;

		xcoSrc = 0.0;
		for (xcoDest = 0; xcoDest < destWidth; xcoDest++) {
			ix1y1 = iy1 + ((int) xcoSrc) * 3;
			ix2y1 = ix1y1 + 3;
			ix1y2 = ix1y1 + stride;
			ix2y2 = ix1y1 + stride + 3;

			xDist = xcoSrc - ((float) ((int) xcoSrc));

			/*
			 * For loop handles all three colors
			 */
			for (i = 0; i < 3; i++) {
				x1y1 = (float) srcFrame[ix1y1 + i];
				x2y1 = (float) srcFrame[ix2y1 + i];
				x1y2 = (float) srcFrame[ix1y2 + i];
				x2y2 = (float) srcFrame[ix2y2 + i];

				/*
				 * Bilinear interpolation function
				 */
				destFrame[iDest] = (u8) ((1.0 - yDist)
						* ((1.0 - xDist) * x1y1 + xDist * x2y1)
						+ yDist * ((1.0 - xDist) * x1y2 + xDist * x2y2));
				iDest++;
			}
			xcoSrc += xInc;
		}
		ycoSrc += yInc;
	}

	/*
	 * Flush the framebuffer memory range to ensure changes are written to the
	 * actual memory, and therefore accessible by the VDMA.
	 */
	Xil_DCacheFlushRange((unsigned int) destFrame, DEMO_MAX_FRAME);

	return;
}

void background(u8 *frame, u32 width, u32 height, u32 stride) {
	u32 xcoi, ycoi;
	u32 iPixelAddr;
	u8 wRed, wBlue, wGreen;

//background
	for (xcoi = 0; xcoi < (width * 3); xcoi += 3) {
		iPixelAddr = xcoi;
		for (ycoi = 0; ycoi < height; ycoi++) {
			wRed = 0;
			wGreen = 0;
			wBlue = 0;
			frame[iPixelAddr] = wGreen;
			frame[iPixelAddr + 1] = wBlue;
			frame[iPixelAddr + 2] = wRed;
			iPixelAddr += stride;
		}
	}
	Xil_DCacheFlushRange((unsigned int) frame, DEMO_MAX_FRAME);
}

void shooter(u8 *frame, u32 width, u32 height, u32 stride) {

	int i;
	u32 xcoi, ycoi;
	u32 iPixelAddr, arraycounter, times;
	u8 wRed, wBlue, wGreen;
	times = 0;
	iPixelAddr = 0;
	arraycounter = 0;

	//xcoi = player.xPos;

	for (xcoi = player.xPos; xcoi < player.xPos + player.xSize; xcoi += 3) {
		//arraycounter = times;
		arraycounter = times;
		iPixelAddr = xcoi;

		for (ycoi = 0; ycoi < height; ycoi++) {
			if (ycoi >= 460) {

				frame[iPixelAddr] = array[arraycounter];
				frame[iPixelAddr + 1] = array[arraycounter + 1];
				frame[iPixelAddr + 2] = array[arraycounter + 2];
				arraycounter += 60;
				iPixelAddr += stride;
			} else {

				iPixelAddr += stride;
			}
			/*
			 * This pattern is printed one vertical line at a time, so the address must be incremented
			 * by the stride instead of just 1.
			 */

		}
		times += 3;
	}

//	for (xcoi = 0; xcoi < (20 * 3); xcoi += 3) {
//
//			iPixelAddr = xcoi;
//			arraycounter = xcoi;
//
//			for (ycoi = 0; ycoi < 20; ycoi++) {
//				frame[iPixelAddr] = array[arraycounter];
//				frame[iPixelAddr + 1] = array[arraycounter + 1];
//				frame[iPixelAddr + 2] = array[arraycounter + 2];
//
//				/*
//				 * This pattern is printed one vertical line at a time, so the address must be incremented
//				 * by the stride instead of just 1.
//				 */
//				iPixelAddr += stride;
//				arraycounter += 60;
//			}
//		}

	/*
	 * Flush the framebuffer memory range to ensure changes are written to the
	 * actual memory, and therefore accessible by the VDMA.
	 */
	Xil_DCacheFlushRange((unsigned int) frame, DEMO_MAX_FRAME);

}

void hostile(u8 *frame, u32 width, u32 height, u32 stride) {
	u32 xcoi, ycoi;
	u32 iPixelAddr, arraycounter;
	u8 wRed, wBlue, wGreen;
	arraycounter = 0;

	//ENEMY
	int k;
	int times;

	for (k = 0; k < LEVEL_1_ENEMIES; k++) {
		arraycounter = 0;
		int times = 0;
		for (xcoi = enemy[k].xPos; xcoi < ((enemy[k].xPos + enemy[k].xSize));
				xcoi += 3) {
			iPixelAddr = xcoi;
			arraycounter = times;
			for (ycoi = 0; ycoi < height; ycoi++) {
				if(enemy[k].xSize < width * 3){
					if (ycoi > enemy[k].yPos
					&& ycoi < (enemy[k].yPos + enemy[k].ySize)) {
						frame[iPixelAddr] 	  = ememy[arraycounter];
						frame[iPixelAddr + 1] = ememy[arraycounter + 1];
						frame[iPixelAddr + 2] = ememy[arraycounter + 2];

						iPixelAddr += stride;
						arraycounter += 120;
					} else {

						iPixelAddr += stride;
					}
				}

			}
			times += 3;
		}
		Xil_DCacheFlushRange((unsigned int) frame, DEMO_MAX_FRAME);
	}

//
//	u32 xcoi, ycoi;
//		u32 iPixelAddr, arraycounter;
//		u8 wRed, wBlue, wGreen;
//
//		int times = 0;
//		arraycounter = 0;
//		for (xcoi = 200; xcoi < (40 * 3) + 200; xcoi += 3) {
//	//		arraycounter = arraycounter + 3;
//			arraycounter = times;
//			iPixelAddr = xcoi;
//
//			for (ycoi = 0; ycoi < 40; ycoi++) {
//				frame[iPixelAddr] = ememy[arraycounter];
//				frame[iPixelAddr + 1] = ememy[arraycounter + 1];
//				frame[iPixelAddr + 2] = ememy[arraycounter + 2];
//
//				/*
//				 * This pattern is printed one vertical line at a time, so the address must be incremented
//				 * by the stride instead of just 1.
//				 */
//				iPixelAddr += stride;
//				arraycounter += 120;
//			}
//			times += 3;
//		}
//
//		/*
//		 * Flush the framebuffer memory range to ensure changes are written to the
//		 * actual memory, and therefore accessible by the VDMA.
//		 */
//		Xil_DCacheFlushRange((unsigned int) frame, DEMO_MAX_FRAME);
//
//
//
//
//

}

void shot(u8 *frame, u32 width, u32 height, u32 stride) {
	u32 xcoi, ycoi;
	u32 iPixelAddr;
	u8 wRed, wBlue, wGreen;

	//Laser
	if (shoot == 1) {
		laser.xPos = (player.xPos + 26);
		bulletsFired++;
	}
	xcoi = laser.xPos;
	for (xcoi = 0; xcoi < (width * 3); xcoi += 3) {
		iPixelAddr = xcoi;
		for (ycoi = 0; ycoi < height; ycoi++) {
			if (ycoi > laser.yPos && ycoi < (laser.yPos + laser.ySize)) {
				if (xcoi > laser.xPos && xcoi < (laser.xPos + laser.xSize)) {
					wRed = 100;
					wGreen = 204;
					wBlue = 50;
					frame[iPixelAddr] = wGreen;
					frame[iPixelAddr + 1] = wBlue;
					frame[iPixelAddr + 2] = wRed;
					iPixelAddr += stride;
				} else {
					iPixelAddr += stride;
				}
			} else {
				iPixelAddr += stride;
			}
		}
	}
	Xil_DCacheFlushRange((unsigned int) frame, DEMO_MAX_FRAME);
}

void picture(u8 *frame, u32 width, u32 height, u32 stride) {
	u32 xcoi, ycoi;
	u32 iPixelAddr, arraycounter;
	u8 wRed, wBlue, wGreen;

	int times = 0;
	arraycounter = 0;
	for (xcoi = 200; xcoi < (40 * 3) + 200; xcoi += 3) {
//		arraycounter = arraycounter + 3;
		arraycounter = times;
		iPixelAddr = xcoi;

		for (ycoi = 0; ycoi < 40; ycoi++) {
			frame[iPixelAddr] = ememy[arraycounter];
			frame[iPixelAddr + 1] = ememy[arraycounter + 1];
			frame[iPixelAddr + 2] = ememy[arraycounter + 2];

			/*
			 * This pattern is printed one vertical line at a time, so the address must be incremented
			 * by the stride instead of just 1.
			 */
			iPixelAddr += stride;
			arraycounter += 120;
		}
		times += 3;
	}

	/*
	 * Flush the framebuffer memory range to ensure changes are written to the
	 * actual memory, and therefore accessible by the VDMA.
	 */
	Xil_DCacheFlushRange((unsigned int) frame, DEMO_MAX_FRAME);
}

void DemoISR(void *callBackRef, void *pVideo) {
	char *data = (char *) callBackRef;
	*data = 1; //set fRefresh to 1
}

