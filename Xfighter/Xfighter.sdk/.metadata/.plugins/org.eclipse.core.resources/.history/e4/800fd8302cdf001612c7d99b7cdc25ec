/************************************************************************/
/*																		*/
/*	video_demo.c	--	ZYBO Video demonstration 						*/
/*																		*/
/************************************************************************/
/*	Author: Sam Bobrowicz												*/
/*	Copyright 2015, Digilent Inc.										*/
/************************************************************************/
/*  Module Description: 												*/
/*																		*/
/*		This file contains code for running a demonstration of the		*/
/*		Video input and output capabilities on the ZYBO. It is a good	*/
/*		example of how to properly use the display_ctrl and				*/
/*		video_capture drivers.											*/
/*																		*/
/*																		*/
/************************************************************************/
/*  Revision History:													*/
/* 																		*/
/*		11/25/2015(SamB): Created										*/
/*																		*/
/************************************************************************/

/* ------------------------------------------------------------ */
/*				Include File Definitions						*/
/* ------------------------------------------------------------ */

#include "video_demo.h"
#include "video_capture/video_capture.h"
#include "display_ctrl/display_ctrl.h"
#include "intc/intc.h"
#include <stdio.h>
#include "xuartps.h"
#include "math.h"
#include <ctype.h>
#include <stdlib.h>
#include <time.h>
#include "xil_types.h"
#include "xil_cache.h"
#include "timer_ps/timer_ps.h"
#include "xparameters.h"
#include "xgpio.h"
#include "xscugic.h"
#include "xil_exception.h"
#include "xil_printf.h"
#include "stdbool.h"

////#define TMR_DEVICE_ID			XPAR_TMRCTR_0_DEVICE_ID
#define BTNS_DEVICE_ID			XPAR_AXI_GPIO_BTN_DEVICE_ID
#define LEDS_DEVICE_ID			XPAR_AXI_GPIO_LED_DEVICE_ID
#define SWI_DEVICE_ID			XPAR_AXI_GPIO_SW_DEVICE_ID
/*
 * XPAR redefines
 */
#define DYNCLK_BASEADDR 		XPAR_AXI_DYNCLK_0_BASEADDR
#define VGA_VDMA_ID 			XPAR_AXIVDMA_0_DEVICE_ID
#define DISP_VTC_ID 			XPAR_VTC_0_DEVICE_ID
#define VID_VTC_ID 				XPAR_VTC_1_DEVICE_ID
#define VID_GPIO_ID 			XPAR_AXI_GPIO_VIDEO_DEVICE_ID
#define VID_VTC_IRPT_ID 		XPS_FPGA3_INT_ID
#define VID_GPIO_IRPT_ID 		XPS_FPGA4_INT_ID
#define SCU_TIMER_ID	 		XPAR_SCUTIMER_DEVICE_ID
#define UART_BASEADDR 			XPAR_PS7_UART_1_BASEADDR

#define LEVEL_1_ENEMIES 10
#define LEVEL_2_ENEMIES 10
#define LEVEL_3_ENEMIES 15
/* ------------------------------------------------------------ */
/*				Global Variables								*/
/* ------------------------------------------------------------ */

/*
 * Display and Video Driver structs
 */

XGpio LEDInst, BTNInst, SWIInst;
DisplayCtrl dispCtrl;
XAxiVdma vdma;
//VideoCapture videoCapt;
INTC intc;

//static int led_data;
static int btn_value;
static int swi_value;
static int fired = 0;
static int shoot = 0;

static int bulletsFired = 0;
static int enemiesKilled = 0;
static int points = 0;
static int enemiesPassed = 0;
static int loop = 1;
int nextFrame = 0;

char fRefresh; //flag used to trigger a refresh of the Menu on video detect

/*
 * Framebuffers for video data
 */
u8 frameBuf[DISPLAY_NUM_FRAMES][DEMO_MAX_FRAME];
u8 *pFrames[DISPLAY_NUM_FRAMES]; //array of pointers to the frame buffers

/*
 * Interrupt vector table
 */
//const ivt_t ivt[] = {
////videoGpioIvt(VID_GPIO_IRPT_ID, &videoCapt),
////videoVtcIvt(VID_VTC_IRPT_ID, &(videoCapt.vtc)) };
void moveEnemies();
void playerLives(u8 *frame, u32 width, u32 height, u32 stride);
void shooter(u8 *frame, u32 width, u32 height, u32 stride);
void hostile(u8 *frame, u32 width, u32 height, u32 stride);
void backgrund(u8 *frame, u32 width, u32 height, u32 stride);
void shot(u8 *frame, u32 width, u32 height, u32 stride);

/* ------------------------------------------------------------ */
/*				Procedure Definitions							*/
/* ------------------------------------------------------------ */

struct object {
	float xPos;
	float yPos;

	float xSize;
	float ySize;

	int lives;
	int xSpeed;
	int ySpeed;

} laser, player, enemy[LEVEL_1_ENEMIES], health;

//more prototypes
void isHit();

// Assumes 0 <= max <= RAND_MAX
// Returns in the closed interval [0, max]
long randomNum(long max) {
	unsigned long
	// max <= RAND_MAX < ULONG_MAX, so this is okay.
	num_bins = (unsigned long) max + 1, num_rand = (unsigned long) RAND_MAX + 1,
			bin_size = num_rand / num_bins, defect = num_rand % num_bins;

	long x;
	do {
		//srand(time(NULL));
		x = rand();
	}
	// This is carefully written not to overflow
	while (num_rand - defect <= (unsigned long) x);

	// Truncated division is intentional
	return x / bin_size;
}

void InitializeElements() {

	player.xSize = 20 * 3;
	player.xPos = randomNum((640 * 3 - player.xSize));
	player.lives = 3;

	player.ySize = 20;
	player.yPos = 480 - 20;

	health.xPos = ((640 * 3) - (3 * 20 * 3));
	health.xSize = (640 * 3);
	health.ySize = 20;
	health.yPos = 0;

	int i;
	int z;
	for (i = 0; i < LEVEL_1_ENEMIES; i++) {
		enemy[i].lives = 2;
		enemy[i].xSize = (40 * 3);
		//enemy[i].xPos = enemy[i].xSize + randomNum((640 * 3 - player.xSize));
		enemy[i].xPos = RandRange(0, 590);

		enemy[i].ySpeed = RandRange(1, 3);
		enemy[i].xSpeed = RandRange(-10, 10);

		//enemy[i].xPos = enemy[i].xSize + randomNum((640 * 3 - player.xSize));
//		if (enemy[i].xSize > 640 * 3) {
//			enemy[i].xPos = enemy[i].xSize
//					+ randomNum((640 * 3 - player.xSize));
//		}

		if (enemy[i].xSize > 640 * 3) {
			enemy[i].xPos = enemy[i].xSize + RandRange(50 * 3, 550 * 3);
		}

//		for (z = 0; z < LEVEL_1_ENEMIES; z++) {
//			if (enemy[i].xPos > enemy[z].xPos
//					&& enemy[i].xPos < enemy[z].xPos + enemy[z].xSize) {
//				enemy[i].xPos = randomNum((640 * 3 - player.xSize)) + 40;
//			}
//			if (enemy[i].xPos + enemy[i].xSize > enemy[z].xPos
//					&& enemy[i].xPos + enemy[i].xSize
//							< enemy[z].xPos + enemy[z].xSize) {
//				enemy[i].xPos = randomNum((640 * 3 - player.xSize)) + 40 * 3;
//			}
//		}

		enemy[i].ySize = 40;
		enemy[i].yPos = -100;
//		numEnemies++;
	}

	laser.xSize = 5;
	laser.ySize = 5;
	laser.xPos = (((640 * 3) / 2) + 12);
	laser.yPos = 460;

}

int main(void) {
	int status;
	//----------------------------------------------------
	// INITIALIZE THE PERIPHERALS & SET DIRECTIONS OF GPIO
	//----------------------------------------------------
	// Initialise LEDs
	status = XGpio_Initialize(&LEDInst, LEDS_DEVICE_ID);
	if (status != XST_SUCCESS)
		return XST_FAILURE;
	// Initialise Push Buttons
	status = XGpio_Initialize(&BTNInst, BTNS_DEVICE_ID);
	if (status != XST_SUCCESS)
		return XST_FAILURE;
	// Initialize Switches

	status = XGpio_Initialize(&SWIInst, SWI_DEVICE_ID);
	if (status != XST_SUCCESS)
		return XST_FAILURE;

	// Set LEDs direction to outputs
	XGpio_SetDataDirection(&LEDInst, 1, 0x00);
	// Set all buttons direction to inputs
	XGpio_SetDataDirection(&BTNInst, 1, 0xFF);
	// Set all buttons direction to inputs
	XGpio_SetDataDirection(&SWIInst, 1, 0xFF);

	InitializeElements();
	gameInitialize();
	runGame(); // denne function kører i while loop! nedenstående while loop køres derfor ikke.

	return 0;
}

void gameInitialize() {
	int Status;
	XAxiVdma_Config *vdmaConfig;
	int i;

	/*
	 * Initialize an array of pointers to the 3 frame buffers
	 */
	for (i = 0; i < DISPLAY_NUM_FRAMES; i++) {
		pFrames[i] = frameBuf[i];
	}

	/*
	 * Initialize a timer used for a simple delay
	 */
	TimerInitialize(SCU_TIMER_ID);

	/*
	 * Initialize VDMA driver
	 */
	vdmaConfig = XAxiVdma_LookupConfig(VGA_VDMA_ID);
	if (!vdmaConfig) {
		xil_printf("No video DMA found for ID %d\r\n", VGA_VDMA_ID);
		return;
	}
	Status = XAxiVdma_CfgInitialize(&vdma, vdmaConfig, vdmaConfig->BaseAddress);
	if (Status != XST_SUCCESS) {
		xil_printf("VDMA Configuration Initialization failed %d\r\n", Status);
		return;
	}

	/*
	 * Initialize the Display controller and start it
	 */
	Status = DisplayInitialize(&dispCtrl, &vdma, DISP_VTC_ID, DYNCLK_BASEADDR,
			pFrames, DEMO_STRIDE);
	if (Status != XST_SUCCESS) {
		xil_printf(
				"Display Ctrl initialization failed during demo initialization%d\r\n",
				Status);
		return;
	}
	Status = DisplayStart(&dispCtrl);
	if (Status != XST_SUCCESS) {
		xil_printf("Couldn't start display during demo initialization%d\r\n",
				Status);
		return;
	}

	/*
	 * Initialize the Interrupt controller and start it.
	 */
	Status = fnInitInterruptController(&intc);
	if (Status != XST_SUCCESS) {
		xil_printf("Error initializing interrupts");
		return;
	}
//	fnEnableInterrupts(&intc, &ivt[0], sizeof(ivt) / sizeof(ivt[0]));

	/*
	 * Initialize the Video Capture device
	 */
//	Status = VideoInitialize(&videoCapt, &intc, &vdma, VID_GPIO_ID, VID_VTC_ID,
//	VID_VTC_IRPT_ID, pFrames, DEMO_STRIDE, DEMO_START_ON_DET);
//	if (Status != XST_SUCCESS) {
//		xil_printf(
//				"Video Ctrl initialization failed during demo initialization%d\r\n",
//				Status);
//		return;
//	}
	/*
	 * Set the Video Detect callback to trigger the menu to reset, displaying the new detected resolution
	 */

//	VideoSetCallback(&videoCapt, DemoISR, &fRefresh);
	background(pFrames[dispCtrl.curFrame], dispCtrl.vMode.width,
			dispCtrl.vMode.height, DEMO_STRIDE);
	shooter(pFrames[dispCtrl.curFrame], dispCtrl.vMode.width,
			dispCtrl.vMode.height, DEMO_STRIDE);
	shot(pFrames[dispCtrl.curFrame], dispCtrl.vMode.width,
			dispCtrl.vMode.height, DEMO_STRIDE);
	hostile(pFrames[dispCtrl.curFrame], dispCtrl.vMode.width,
			dispCtrl.vMode.height, DEMO_STRIDE);
	//picture(pFrames[dispCtrl.curFrame], dispCtrl.vMode.width,
	//dispCtrl.vMode.height,
	//	DEMO_STRIDE);
	playerLives(pFrames[dispCtrl.curFrame], dispCtrl.vMode.width,
			dispCtrl.vMode.height,
			DEMO_STRIDE);
//	DemoPrintTest(dispCtrl.framePtr[dispCtrl.curFrame], dispCtrl.vMode.width,
//			dispCtrl.vMode.height, dispCtrl.stride, DEMO_PATTERN_1);

	return;
}

void runGame() {
//	char userInput = 0;

	/* Flush UART FIFO */
//	while (XUartPs_IsReceiveData(UART_BASEADDR)) {
//		XUartPs_ReadReg(UART_BASEADDR, XUARTPS_FIFO_OFFSET);
//	}
//	while (userInput != 'q') {
	hostile(pFrames[nextFrame], dispCtrl.vMode.width, dispCtrl.vMode.height,
	DEMO_STRIDE);

	while (loop == 1) {

		int i;
		for (i = 0; i < LEVEL_1_ENEMIES; i++) {

			if ((enemy[i].xSize + enemy[i].xPos) > 630 * 3
					|| enemy[i].xPos < 10 * 3) {
				enemy[i].xSpeed = enemy[i].xSpeed * -1;
			}

			if (enemy[i].yPos > 480) {
				enemy[i].yPos = -100;
				enemiesPassed++;
				drawStats();

				if (enemy[i].ySpeed < 18) {
					enemy[i].ySpeed = enemy[i].ySpeed * 1.5;
				}

				if (enemy[i].xSpeed < 18) {

					enemy[i].xSpeed = enemy[i].xSpeed * 1.5;
				}
				enemy[i].xPos = RandRange(100 * 3, 400 * 3);
			}


		}
		moveEnemies();
		isPlayerHit();
		background(pFrames[nextFrame], dispCtrl.vMode.width,
				dispCtrl.vMode.height,
				DEMO_STRIDE);
		shooter(pFrames[nextFrame], dispCtrl.vMode.width, dispCtrl.vMode.height,
		DEMO_STRIDE);
		shot(pFrames[nextFrame], dispCtrl.vMode.width, dispCtrl.vMode.height,
		DEMO_STRIDE);
		hostile(pFrames[nextFrame], dispCtrl.vMode.width, dispCtrl.vMode.height,
		DEMO_STRIDE);
		playerLives(pFrames[nextFrame], dispCtrl.vMode.width,
				dispCtrl.vMode.height,
				DEMO_STRIDE);
		//picture(pFrames[nextFrame], dispCtrl.vMode.width, dispCtrl.vMode.height,
		//DEMO_STRIDE);
		DisplayChangeFrame(&dispCtrl, nextFrame);

		btn_value = XGpio_DiscreteRead(&BTNInst, 1);
		swi_value = XGpio_DiscreteRead(&SWIInst, 1);
//		fRefresh = 0;
//DemoPrintMenu();

		switch (btn_value) {

		case 1:
			moveEnemies();
			isPlayerHit();
			drawStats();
			nextFrame = dispCtrl.curFrame + 1;
			if (nextFrame >= DISPLAY_NUM_FRAMES) {
				nextFrame = 0;
			}
			if (player.xPos < (620 * 3)) {
				player.xPos = player.xPos + 30;
				background(pFrames[nextFrame], dispCtrl.vMode.width,
						dispCtrl.vMode.height, DEMO_STRIDE);

				shot(pFrames[nextFrame], dispCtrl.vMode.width,
						dispCtrl.vMode.height, DEMO_STRIDE);

				shooter(pFrames[nextFrame], dispCtrl.vMode.width,
						dispCtrl.vMode.height, DEMO_STRIDE);

				hostile(pFrames[nextFrame], dispCtrl.vMode.width,
						dispCtrl.vMode.height, DEMO_STRIDE);

				playerLives(pFrames[nextFrame], dispCtrl.vMode.width,
						dispCtrl.vMode.height,
						DEMO_STRIDE);

				DisplayChangeFrame(&dispCtrl, nextFrame);

			}
			break;
		case 2:
			moveEnemies();
			isPlayerHit();
			drawStats();
			nextFrame = dispCtrl.curFrame + 1;
			if (nextFrame >= DISPLAY_NUM_FRAMES) {
				nextFrame = 0;
			}
			if (player.xPos > 20 * 3) {
				player.xPos = player.xPos - 30;
				background(pFrames[nextFrame], dispCtrl.vMode.width,
						dispCtrl.vMode.height, DEMO_STRIDE);

				shot(pFrames[nextFrame], dispCtrl.vMode.width,
						dispCtrl.vMode.height, DEMO_STRIDE);

				shooter(pFrames[nextFrame], dispCtrl.vMode.width,
						dispCtrl.vMode.height, DEMO_STRIDE);

				hostile(pFrames[nextFrame], dispCtrl.vMode.width,
						dispCtrl.vMode.height, DEMO_STRIDE);

				playerLives(pFrames[nextFrame], dispCtrl.vMode.width,
						dispCtrl.vMode.height,
						DEMO_STRIDE);

				DisplayChangeFrame(&dispCtrl, nextFrame);
			}
			break;
		case 8:
			TimerDelay(100000);
			if(btn_value == 8){
				bulletsFired++;
				isPlayerHit();
				moveEnemies();
				drawStats();
				if (shoot == 0) {
					shoot = 1;
					fired = 1;
				}
				nextFrame = dispCtrl.curFrame + 1;
				if (nextFrame >= DISPLAY_NUM_FRAMES) {
					nextFrame = 0;
				}
				if (laser.yPos < 11) {
					laser.yPos = 460;
				}
				if (laser.yPos < 450 && laser.yPos > 11) {
					shoot = 0;
					fired = 0;
				}

				isHit();

				background(pFrames[nextFrame], dispCtrl.vMode.width,
						dispCtrl.vMode.height, DEMO_STRIDE);
				shooter(pFrames[nextFrame], dispCtrl.vMode.width,
						dispCtrl.vMode.height, DEMO_STRIDE);
				shot(pFrames[nextFrame], dispCtrl.vMode.width,
						dispCtrl.vMode.height, DEMO_STRIDE);
				hostile(pFrames[nextFrame], dispCtrl.vMode.width,
						dispCtrl.vMode.height, DEMO_STRIDE);
				playerLives(pFrames[nextFrame], dispCtrl.vMode.width,
						dispCtrl.vMode.height,
						DEMO_STRIDE);

				DisplayChangeFrame(&dispCtrl, nextFrame);
			}

			break;
		default:

			;
		}
	}
	whiteBackground(pFrames[nextFrame], dispCtrl.vMode.width,
			dispCtrl.vMode.height,
			DEMO_STRIDE);
	gameoverBackFunc(pFrames[nextFrame], dispCtrl.vMode.width,
			dispCtrl.vMode.height,
			DEMO_STRIDE);
	DisplayChangeFrame(&dispCtrl, nextFrame);

	TimerDelay(10000000);

	bulletsFired = 0;
	enemiesKilled = 0;
	points = 0;
	enemiesPassed = 0;
	drawStats();

	loop = 1;
	player.lives = 3;
	health.xPos -= 20 * 3 * 2;
	int i;
	for (i = 0; i < LEVEL_1_ENEMIES; i++) {

		enemy[i].yPos = -100;
		enemy[i].ySpeed = RandRange(1, 3);
		enemy[i].xSpeed = RandRange(1, 5);

	}
	runGame();
//		}
//	}
	return;
}

void drawStats() {
//	accuracy = (points/10/bulletsFired);
	xil_printf("\x1B[H"); //Set cursor to top left of terminal
	xil_printf("\x1B[2J"); //Clear terminal
	xil_printf("#########STATS OF THE GAME:#########\n\r");
	xil_printf("===================================\n\r");
	xil_printf("Laser shots fired:   		%d\n\r", bulletsFired);
	xil_printf("Total enemies killed:   	%d\n\r", enemiesKilled);
	xil_printf("Total points gained:		%d\n\r", points);
	xil_printf("Total enemies escaped: 		%d\n\r", enemiesPassed);
	xil_printf("Player lives left: 		%d\n\r", player.lives);
	xil_printf("===================================\n\r");
}

void isPlayerHit() {
	int i;

	for (i = 0; i <= LEVEL_1_ENEMIES; i++) {
		if (player.yPos < (enemy[i].yPos + enemy[i].ySize)) {
			if (player.xPos > enemy[i].xPos) {
				if ((player.xPos + player.xSize)
						< (enemy[i].xPos + enemy[i].xSize)) {
					player.lives--;
					if (player.lives == 0) {
						loop = 0;
					} else {
						health.xPos += 20 * 3;
					}

					enemy[i].yPos = -100;

					enemy[i].xPos = randomNum((640 * 3 - enemy[i].xSize)) + 40;
					if (enemy[i].xPos + enemy[i].xSize > 640 * 3) {
						enemy[i].xPos = enemy[i].xSize
								+ randomNum((640 * 3 - enemy[i].xSize));
					}

					resetShot();

					//points += 10;
				}
			}
		}

	}
}

void isHit() {
	int i;

	for (i = 0; i <= LEVEL_1_ENEMIES; i++) {
		if ((enemy[i].yPos + enemy[i].ySize > laser.yPos)
				&& (enemy[i].xPos < laser.xPos)
				&& (enemy[i].xPos + enemy[i].xSize > laser.xPos + laser.xSize)) {
			enemy[i].lives--;

			enemy[i].yPos = -100;

			enemy[i].xPos = randomNum((640 * 3 - player.xSize)) + 40;
			if (enemy[i].xPos + enemy[i].xSize > 640 * 3) {
				enemy[i].xPos = enemy[i].xSize
						+ randomNum((640 * 3 - player.xSize));
			}

			resetShot();
			enemiesKilled++;
			points += 10;
		}

	}
}

void resetShot() {
	laser.yPos = 479;
	shoot = 0;
	fired = 0;
}

//
//void DemoScaleFrame(u8 *srcFrame, u8 *destFrame, u32 srcWidth, u32 srcHeight,
//		u32 destWidth, u32 destHeight, u32 stride) {
//	float xInc, yInc; // Width/height of a destination frame pixel in the source frame coordinate system
//	float xcoSrc, ycoSrc; // Location of the destination pixel being operated on in the source frame coordinate system
//	float x1y1, x2y1, x1y2, x2y2; //Used to store the color data of the four nearest source pixels to the destination pixel
//	int ix1y1, ix2y1, ix1y2, ix2y2; //indexes into the source frame for the four nearest source pixels to the destination pixel
//	float xDist, yDist; //distances between destination pixel and x1y1 source pixels in source frame coordinate system
//
//	int xcoDest, ycoDest; // Location of the destination pixel being operated on in the destination coordinate system
//	int iy1; //Used to store the index of the first source pixel in the line with y1
//	int iDest; //index of the pixel data in the destination frame being operated on
//
//	int i;
//
//	xInc = ((float) srcWidth - 1.0) / ((float) destWidth);
//	yInc = ((float) srcHeight - 1.0) / ((float) destHeight);
//
//	ycoSrc = 0.0;
//	for (ycoDest = 0; ycoDest < destHeight; ycoDest++) {
//		iy1 = ((int) ycoSrc) * stride;
//		yDist = ycoSrc - ((float) ((int) ycoSrc));
//
//		/*
//		 * Save some cycles in the loop below by presetting the destination
//		 * index to the first pixel in the current line
//		 */
//		iDest = ycoDest * stride;
//
//		xcoSrc = 0.0;
//		for (xcoDest = 0; xcoDest < destWidth; xcoDest++) {
//			ix1y1 = iy1 + ((int) xcoSrc) * 3;
//			ix2y1 = ix1y1 + 3;
//			ix1y2 = ix1y1 + stride;
//			ix2y2 = ix1y1 + stride + 3;
//
//			xDist = xcoSrc - ((float) ((int) xcoSrc));
//
//			/*
//			 * For loop handles all three colors
//			 */
//			for (i = 0; i < 3; i++) {
//				x1y1 = (float) srcFrame[ix1y1 + i];
//				x2y1 = (float) srcFrame[ix2y1 + i];
//				x1y2 = (float) srcFrame[ix1y2 + i];
//				x2y2 = (float) srcFrame[ix2y2 + i];
//
//				/*
//				 * Bilinear interpolation function
//				 */
//				destFrame[iDest] = (u8) ((1.0 - yDist)
//						* ((1.0 - xDist) * x1y1 + xDist * x2y1)
//						+ yDist * ((1.0 - xDist) * x1y2 + xDist * x2y2));
//				iDest++;
//			}
//			xcoSrc += xInc;
//		}
//		ycoSrc += yInc;
//	}
//
//	/*
//	 * Flush the framebuffer memory range to ensure changes are written to the
//	 * actual memory, and therefore accessible by the VDMA.
//	 */
//	Xil_DCacheFlushRange((unsigned int) destFrame, DEMO_MAX_FRAME);
//
//	return;
//}

void moveEnemies() {
	int i;
	nextFrame = dispCtrl.curFrame + 1;
	if (nextFrame >= DISPLAY_NUM_FRAMES) {
		nextFrame = 0;
	}
	for (i = 0; i < LEVEL_1_ENEMIES; i++) {
		if (enemy[i].lives > 0) {
			enemy[i].yPos += enemy[i].ySpeed;
			enemy[i].xPos += enemy[i].xSpeed;
		}
	}

	if (fired == 1) {
		laser.yPos = laser.yPos - 15;

	}
	isHit();
}

void background(u8 *frame, u32 width, u32 height, u32 stride) {
	u32 xcoi, ycoi;
	u32 iPixelAddr, arraycounter, times;
	u8 wRed, wBlue, wGreen;
	times = 0;
	iPixelAddr = 0;
	arraycounter = 0;

//background
	for (xcoi = 0; xcoi < (width * 3); xcoi += 3) {
		iPixelAddr = xcoi;
		for (ycoi = 0; ycoi < height; ycoi++) {

			wRed = 0;
			wGreen = 0;
			wBlue = 0;
			frame[iPixelAddr] = wGreen;
			frame[iPixelAddr + 1] = wBlue;
			frame[iPixelAddr + 2] = wRed;
			iPixelAddr += stride;

		}
	}
	Xil_DCacheFlushRange((unsigned int) frame, DEMO_MAX_FRAME);
}

void whiteBackground(u8 *frame, u32 width, u32 height, u32 stride) {
	u32 xcoi, ycoi;
	u32 iPixelAddr, arraycounter, times;
	u8 wRed, wBlue, wGreen;
	times = 0;
	iPixelAddr = 0;
	arraycounter = 0;

//background
	for (xcoi = 0; xcoi < (width * 3); xcoi += 3) {
		iPixelAddr = xcoi;
		for (ycoi = 0; ycoi < height; ycoi++) {

			wRed = 255;
			wGreen = 255;
			wBlue = 255;
			frame[iPixelAddr] = wGreen;
			frame[iPixelAddr + 1] = wBlue;
			frame[iPixelAddr + 2] = wRed;
			iPixelAddr += stride;

		}
	}
	Xil_DCacheFlushRange((unsigned int) frame, DEMO_MAX_FRAME);
}

void playerLives(u8 *frame, u32 width, u32 height, u32 stride) {
	int i;
	u32 xcoi, ycoi;
	u32 iPixelAddr, arraycounter, times;
	u8 wRed, wBlue, wGreen;
	times = 0;
	iPixelAddr = 0;
	arraycounter = 0;

	for (xcoi = health.xPos; xcoi < health.xSize; xcoi += 3) {
		//arraycounter = times;
		arraycounter = times;
		iPixelAddr = xcoi;

		for (ycoi = 0; ycoi < height; ycoi++) {
			if (xcoi <= 640 * 3) {
				if (ycoi >= 0 && ycoi <= 20) {

					if (array[arraycounter] == 0 && array[arraycounter + 1] == 0
							&& array[arraycounter + 2] == 0) {
						iPixelAddr += stride;
						arraycounter += 60;

					} else {
						frame[iPixelAddr] = array[arraycounter];
						frame[iPixelAddr + 1] = array[arraycounter + 1];
						frame[iPixelAddr + 2] = array[arraycounter + 2];

						iPixelAddr += stride;
						arraycounter += 60;
					}

				} else {
					iPixelAddr += stride;
				}
				/*
				 * This pattern is printed one vertical line at a time, so the address must be incremented
				 * by the stride instead of just 1.
				 */

			}

		}
		times += 3;
	}

	Xil_DCacheFlushRange((unsigned int) frame, DEMO_MAX_FRAME);
}

void shooter(u8 *frame, u32 width, u32 height, u32 stride) {

	int i;
	u32 xcoi, ycoi;
	u32 iPixelAddr, arraycounter, times;
	u8 wRed, wBlue, wGreen;
	times = 0;
	iPixelAddr = 0;
	arraycounter = 0;

//xcoi = player.xPos;

	if (player.lives > 0) {
		for (xcoi = player.xPos; xcoi < player.xPos + player.xSize; xcoi += 3) {
			arraycounter = times;
			iPixelAddr = xcoi;

			for (ycoi = 0; ycoi < height; ycoi++) {
				if (xcoi <= 620 * 3) {
					if (ycoi >= 460) {

						if (array[arraycounter] == 0
								&& array[arraycounter + 1] == 0
								&& array[arraycounter + 2] == 0) {
							iPixelAddr += stride;
							arraycounter += 60;

						} else {

							frame[iPixelAddr] = array[arraycounter];
							frame[iPixelAddr + 1] = array[arraycounter + 1];
							frame[iPixelAddr + 2] = array[arraycounter + 2];

							iPixelAddr += stride;
							arraycounter += 60;
						}
					} else {

						iPixelAddr += stride;
					}
				}

			}
			times += 3;
		}
	}

	Xil_DCacheFlushRange((unsigned int) frame, DEMO_MAX_FRAME);

}

void hostile(u8 *frame, u32 width, u32 height, u32 stride) {
	u32 xcoi, ycoi;
	u32 iPixelAddr, arraycounter;
	u8 wRed, wBlue, wGreen;
	arraycounter = 0;

//ENEMY
	int k;
	int times;

	int i;
	for (i = 0; i < LEVEL_1_ENEMIES; i++) {
		if (enemy[i].lives <= 0) {
			enemy[i].lives = 3;
		}
	}

	for (k = 0; k < LEVEL_1_ENEMIES; k++) {
		if (enemy[k].lives > 0) {
			arraycounter = 0;
			int times = 0;
			for (xcoi = enemy[k].xPos;
					xcoi < ((enemy[k].xPos + enemy[k].xSize)); xcoi += 3) {
				iPixelAddr = xcoi;
				arraycounter = times;
				for (ycoi = 0; ycoi < height; ycoi++) {
					if (enemy[k].xSize < width * 3) {
						if (ycoi > enemy[k].yPos
								&& ycoi < (enemy[k].yPos + enemy[k].ySize)) {
							if (ememy[arraycounter] == 0
									&& ememy[arraycounter + 1] == 0
									&& ememy[arraycounter + 2] == 0) {
								iPixelAddr += stride;
								arraycounter += 120;

							} else {
								frame[iPixelAddr] = ememy[arraycounter];
								frame[iPixelAddr + 1] = ememy[arraycounter + 1];
								frame[iPixelAddr + 2] = ememy[arraycounter + 2];

								iPixelAddr += stride;
								arraycounter += 120;
							}

						} else {

							iPixelAddr += stride;
						}
					}

				}
				times += 3;
			}
		}
		Xil_DCacheFlushRange((unsigned int) frame, DEMO_MAX_FRAME);
	}
}

void hostileMovement(u8 *frame, u32 width, u32 height, u32 stride) {

	u32 xcoi, ycoi;
	u32 iPixelAddr, arraycounter;
	u8 wRed, wBlue, wGreen;
	arraycounter = 0;

	int times;
	int k;
	for (k = 0; k < LEVEL_1_ENEMIES; k++) {
		enemy[k].yPos += 1;
		//enemy[k].ySize += 1;

		arraycounter = 0;
		int times = 0;
		for (xcoi = enemy[k].xPos; xcoi < ((enemy[k].xPos + enemy[k].xSize));
				xcoi += 3) {
			iPixelAddr = xcoi;
			arraycounter = times;
			for (ycoi = 0; ycoi < height; ycoi++) {
				if (enemy[k].xSize < width * 3) {
					if (ycoi > enemy[k].yPos
							&& ycoi < (enemy[k].yPos + enemy[k].ySize)) {
						frame[iPixelAddr] = ememy[arraycounter];
						frame[iPixelAddr + 1] = ememy[arraycounter + 1];
						frame[iPixelAddr + 2] = ememy[arraycounter + 2];

						iPixelAddr += stride;
						arraycounter += 120;
					} else {

						iPixelAddr += stride;
					}
				}

			}
			times += 3;
		}
		Xil_DCacheFlushRange((unsigned int) frame, DEMO_MAX_FRAME);

	}
}

void shot(u8 *frame, u32 width, u32 height, u32 stride) {
	u32 xcoi, ycoi;
	u32 iPixelAddr;
	u8 wRed, wBlue, wGreen;

	if (shoot == 1) {
		laser.xPos = (player.xPos + 22);
		bulletsFired++;
	}

	xcoi = laser.xPos;
	for (xcoi = 0; xcoi < (width * 3); xcoi += 3) {
		iPixelAddr = xcoi;
		for (ycoi = 0; ycoi < height; ycoi++) {
			if (ycoi > laser.yPos && ycoi < (laser.yPos + laser.ySize)) {
				if (xcoi > laser.xPos && xcoi < (laser.xPos + laser.xSize)) {
					wRed = 100;
					wGreen = 204;
					wBlue = 50;
					frame[iPixelAddr] = wGreen;
					frame[iPixelAddr + 1] = wBlue;
					frame[iPixelAddr + 2] = wRed;
					iPixelAddr += stride;
				} else {
					iPixelAddr += stride;
				}
			} else {
				iPixelAddr += stride;
			}
		}
	}
	Xil_DCacheFlushRange((unsigned int) frame, DEMO_MAX_FRAME);
}

void gameoverBackFunc(u8 *frame, u32 width, u32 height, u32 stride) {
	u32 xcoi, ycoi;
	u32 iPixelAddr, arraycounter;
	u8 wRed, wBlue, wGreen;

	//ENEMY
	int k;
	int times;

	int i;

	arraycounter = 0;
	times = 0;
	for (xcoi = 160 * 3; xcoi <= 160 * 3 + 40 * 3; xcoi += 3) {
		iPixelAddr = xcoi;
		arraycounter = times;
		for (ycoi = 0; ycoi <= height; ycoi++) {
			if (ycoi >= 220 && ycoi <= 260) {
				if (G[arraycounter] == 0 && G[arraycounter + 1] == 0
						&& G[arraycounter + 2] == 204) {
					frame[iPixelAddr] = 255;
					frame[iPixelAddr + 1] = 255;
					frame[iPixelAddr + 2] = 255;

					iPixelAddr += stride;
					arraycounter += 120;
				} else {
					frame[iPixelAddr] = G[arraycounter];
					frame[iPixelAddr + 1] = G[arraycounter + 1];
					frame[iPixelAddr + 2] = G[arraycounter + 2];

					iPixelAddr += stride;
					arraycounter += 120;
					//}
				}
			} else {
				iPixelAddr += stride;
			}
		}
		times += 3;
	}
	times = 0;
	for (xcoi = 160 * 3 + 40 * 3; xcoi <= (160 * 3 + (40 * 3) * 2); xcoi += 3) {
		iPixelAddr = xcoi;
		arraycounter = times;
		for (ycoi = 0; ycoi <= height; ycoi++) {
			if (ycoi >= 220 && ycoi <= 260) {
				if (A[arraycounter] == 0 && A[arraycounter + 1] == 0
						&& A[arraycounter + 2] == 204) {
					frame[iPixelAddr] = 255;
					frame[iPixelAddr + 1] = 255;
					frame[iPixelAddr + 2] = 255;

					iPixelAddr += stride;
					arraycounter += 120;
				} else {
					frame[iPixelAddr] = A[arraycounter];
					frame[iPixelAddr + 1] = A[arraycounter + 1];
					frame[iPixelAddr + 2] = A[arraycounter + 2];

					iPixelAddr += stride;
					arraycounter += 120;
					//}

				}
			} else {
				iPixelAddr += stride;
			}

		}
		times += 3;
	}
	times = 0;
	for (xcoi = (160 * 3 + (40 * 3) * 2); xcoi <= (160 * 3 + (40 * 3) * 3);
			xcoi += 3) {
		iPixelAddr = xcoi;
		arraycounter = times;
		for (ycoi = 0; ycoi <= height; ycoi++) {
			if (ycoi >= 220 && ycoi <= 260) {
				if (M[arraycounter] == 0 && M[arraycounter + 1] == 0
						&& M[arraycounter + 2] == 204) {
					frame[iPixelAddr] = 255;
					frame[iPixelAddr + 1] = 255;
					frame[iPixelAddr + 2] = 255;

					iPixelAddr += stride;
					arraycounter += 120;
				} else {
					frame[iPixelAddr] = M[arraycounter];
					frame[iPixelAddr + 1] = M[arraycounter + 1];
					frame[iPixelAddr + 2] = M[arraycounter + 2];

					iPixelAddr += stride;
					arraycounter += 120;
					//}

				}
			} else {
				iPixelAddr += stride;
			}
		}
		times += 3;
	}
	times = 0;
	for (xcoi = (160 * 3 + (40 * 3) * 3); xcoi <= (160 * 3 + (40 * 3) * 4);
			xcoi += 3) {
		iPixelAddr = xcoi;
		arraycounter = times;
		for (ycoi = 0; ycoi <= height; ycoi++) {
			if (ycoi >= 220 && ycoi <= 260) {
				if (E[arraycounter] == 0 && E[arraycounter + 1] == 0
						&& E[arraycounter + 2] == 204) {
					frame[iPixelAddr] = 255;
					frame[iPixelAddr + 1] = 255;
					frame[iPixelAddr + 2] = 255;

					iPixelAddr += stride;
					arraycounter += 120;
				} else {
					frame[iPixelAddr] = E[arraycounter];
					frame[iPixelAddr + 1] = E[arraycounter + 1];
					frame[iPixelAddr + 2] = E[arraycounter + 2];

					iPixelAddr += stride;
					arraycounter += 120;
					//}

				}
			}

			else {
				iPixelAddr += stride;
			}
		}
		times += 3;
	}
	times = 0;
	for (xcoi = (160 * 3 + (40 * 3) * 4); xcoi <= (160 * 3 + (40 * 3) * 5);
			xcoi += 3) {
		iPixelAddr = xcoi;
		arraycounter = times;
		for (ycoi = 0; ycoi <= height; ycoi++) {
			if (ycoi >= 220 && ycoi <= 260) {
				if (O[arraycounter] == 0 && O[arraycounter + 1] == 0
						&& O[arraycounter + 2] == 204) {
					frame[iPixelAddr] = 255;
					frame[iPixelAddr + 1] = 255;
					frame[iPixelAddr + 2] = 255;

					iPixelAddr += stride;
					arraycounter += 120;
				} else {
					frame[iPixelAddr] = O[arraycounter];
					frame[iPixelAddr + 1] = O[arraycounter + 1];
					frame[iPixelAddr + 2] = O[arraycounter + 2];

					iPixelAddr += stride;
					arraycounter += 120;
					//}

				}
			} else {
				iPixelAddr += stride;
			}
		}
		times += 3;
	}
	times = 0;
	for (xcoi = (160 * 3 + (40 * 3) * 5); xcoi <= (160 * 3 + (40 * 3) * 6);
			xcoi += 3) {
		iPixelAddr = xcoi;
		arraycounter = times;
		for (ycoi = 0; ycoi <= height; ycoi++) {
			if (ycoi >= 220 && ycoi <= 260) {
				if (V[arraycounter] == 0 && V[arraycounter + 1] == 0
						&& V[arraycounter + 2] == 204) {
					frame[iPixelAddr] = 255;
					frame[iPixelAddr + 1] = 255;
					frame[iPixelAddr + 2] = 255;

					iPixelAddr += stride;
					arraycounter += 120;
				} else {
					frame[iPixelAddr] = V[arraycounter];
					frame[iPixelAddr + 1] = V[arraycounter + 1];
					frame[iPixelAddr + 2] = V[arraycounter + 2];

					iPixelAddr += stride;
					arraycounter += 120;
					//}

				}
			} else {
				iPixelAddr += stride;
			}
		}
		times += 3;
	}
	times = 0;
	for (xcoi = (160 * 3 + (40 * 3) * 6); xcoi <= (160 * 3 + (40 * 3) * 7);
			xcoi += 3) {
		iPixelAddr = xcoi;
		arraycounter = times;
		for (ycoi = 0; ycoi <= height; ycoi++) {
			if (ycoi >= 220 && ycoi <= 260) {
				if (E[arraycounter] == 0 && E[arraycounter + 1] == 0
						&& E[arraycounter + 2] == 204) {
					frame[iPixelAddr] = 255;
					frame[iPixelAddr + 1] = 255;
					frame[iPixelAddr + 2] = 255;

					iPixelAddr += stride;
					arraycounter += 120;
				} else {
					frame[iPixelAddr] = E[arraycounter];
					frame[iPixelAddr + 1] = E[arraycounter + 1];
					frame[iPixelAddr + 2] = E[arraycounter + 2];

					iPixelAddr += stride;
					arraycounter += 120;
					//}

				}
			} else {
				iPixelAddr += stride;
			}
		}
		times += 3;
	}
	times = 0;

	for (xcoi = (160 * 3 + (40 * 3) * 7); xcoi <= (160 * 3 + (40 * 3) * 8);
			xcoi += 3) {
		iPixelAddr = xcoi;
		arraycounter = times;
		for (ycoi = 0; ycoi <= height; ycoi++) {
			if (ycoi >= 220 && ycoi < 260) {
				if (R[arraycounter] == 0 && R[arraycounter + 1] == 0
						&& R[arraycounter + 2] == 204) {
					frame[iPixelAddr] = 255;
					frame[iPixelAddr + 1] = 255;
					frame[iPixelAddr + 2] = 255;

					iPixelAddr += stride;
					arraycounter += 120;
				} else {
					frame[iPixelAddr] = R[arraycounter];
					frame[iPixelAddr + 1] = R[arraycounter + 1];
					frame[iPixelAddr + 2] = R[arraycounter + 2];

					iPixelAddr += stride;
					arraycounter += 120;
					//}

				}
			} else {
				iPixelAddr += stride;
			}

		}
		times += 3;
	}

	Xil_DCacheFlushRange((unsigned int) frame, DEMO_MAX_FRAME);
}

void DemoISR(void *callBackRef, void *pVideo) {
	char *data = (char *) callBackRef;
	*data = 1; //set fRefresh to 1
}

int RandRange(int Min, int Max) {
	int diff = Max - Min;
	return (int) (((double) (diff + 1) / RAND_MAX) * rand() + Min);
}

